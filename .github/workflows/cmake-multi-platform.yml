name: CMake with vcpkg (GCC only)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  install-linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Install vcpkg for Linux
    - name: Install vcpkg for Linux
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh
        echo "${{ github.workspace }}/vcpkg" >> $GITHUB_PATH  # Add vcpkg to PATH


  install-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    # Install vcpkg for Windows
    - name: Install vcpkg for Windows
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        echo "${{ github.workspace }}\\vcpkg" >> $env:GITHUB_PATH  # Add vcpkg to PATH

  build:
    needs: [install-linux, install-windows]
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        cpp_compiler: [g++]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies using vcpkg
      run: |
        cd ${{ github.workspace }}/vcpkg
        vcpkg install fltk portaudio

    # Set reusable strings
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Configure CMake
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    # Build the project
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # Run tests
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
